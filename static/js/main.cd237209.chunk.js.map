{"version":3,"sources":["serviceWorker.js","components/DonateButton/index.js","components/TimerCounter/index.js","components/Content/index.js","components/Footer/index.js","components/Header/index.js","pages/Home/index.js","index.js"],"names":["Boolean","window","location","hostname","match","DonateButton","_ref","className","react_default","a","createElement","action","method","target","type","name","value","src","border","title","alt","width","height","formatValue","maxValue","useTimeCounter","starDate","endDate","setTime","getDiff","difference","Date","getTime","seconds","Math","floor","minutes","hours","days","getDiffCreator","useEffect","updateTime","intervalId","setInterval","clearInterval","TimerCounter","_ref2","_useState","useState","_useState2","Object","slicedToArray","time","concat","deliveryOrderDate","cancelledDate","Content","components_TimerCounter","components_DonateButton","Footer","href","Header","App","components_Header","components_Content","components_Footer","ReactDOM","render","Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd237209.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst DonateButton = ({ className }) => (\n  <form className={className} action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n    <input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\" />\n    <input type=\"hidden\" name=\"hosted_button_id\" value=\"8YFERCJN7VZBA\" />\n    <input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" border=\"0\" name=\"submit\" title=\"PayPal - The safer, easier way to pay online!\" alt=\"Donate with PayPal button\" />\n    <img alt=\"\" border=\"0\" src=\"https://www.paypal.com/en_BR/i/scr/pixel.gif\" width=\"1\" height=\"1\" />\n  </form>\n)\n\nexport default DonateButton;\n","import './style.css';\n\nimport React, { useEffect, useState } from 'react'\n\nconst formatValue = (value, maxValue) => value % maxValue;\n\nconst getDiffCreator = (starDate, endDate) => () => {\n  const difference = (endDate || new Date()).getTime() - starDate.getTime();\n  const seconds = Math.floor(difference / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  return {\n    days,\n    hours: formatValue(hours, 24),\n    minutes: formatValue(minutes, 60),\n    seconds: formatValue(seconds, 60),\n  }\n}\n\nconst useTimeCounter = ({ starDate, endDate, setTime }) => {\n  const getDiff = getDiffCreator(starDate, endDate);\n\n  return useEffect(() => {\n    const updateTime = () => setTime(getDiff());\n    const intervalId = !endDate && setInterval(updateTime, 1000);\n\n    updateTime();\n\n    return () => intervalId && clearInterval(intervalId);\n  }, [endDate, getDiff, setTime])\n}\n\nconst TimerCounter = ({ starDate, endDate }) => {\n  const [time, setTime] = useState('');\n\n  useTimeCounter({ starDate, endDate, setTime });\n\n  return (\n    <span className='timer-counter'>\n      {time && `${time.days} days ${time.hours} hours ${time.minutes} minutes ${time.seconds} seconds`}\n    </span>\n  );\n}\n\nexport default TimerCounter;\n","import './style.css';\n\nimport React from 'react';\n\nimport DonateButton from '../../components/DonateButton';\nimport TimerCounter from '../../components/TimerCounter';\n\nconst deliveryOrderDate = new Date(2019, 2, 5, 10, 26);\nconst cancelledDate = new Date(2019, 5, 24, 10, 0);\n\nconst Content = ({ className }) => (\n  <div className={`${className} content`}>\n    <h3>The order was cancelled after waiting for</h3>\n    <TimerCounter starDate={deliveryOrderDate} endDate={cancelledDate} />\n    <DonateButton className='content__donate-button' />\n  </div>\n)\n\nexport default Content;\n","import './style.css';\n\nimport React from 'react';\n\nconst Footer = () => (\n  <footer className='footer'>\n    <div className='footer__line'/>\n\n    <p>\n      Made with <span className='footer--red'>❤︎</span> <span className='footer--angry'>and with a little of anger</span> by <a href='https://twitter.com/FelipeNolleto'>nolleto</a>.\n      Find this on <a href='https://github.com/nolleto/how-long-i-ve-been-waiting-for-my-ps4'>github</a></p>\n  </footer>\n)\n\nexport default Footer\n","import React from 'react';\n\nconst Header = () => (\n  <header className='header'>\n    <h1>How Long I've Been Waiting For My Ps4</h1>\n  </header>\n);\n\nexport default Header;\n","import './style.css';\n\nimport React from 'react';\n\nimport Content from '../../components/Content';\nimport Footer from '../../components/Footer';\nimport Header from '../../components/Header';\n\nconst App = () => (\n  <div className='home'>\n    <Header />\n    <Content className='home__content' />\n    <Footer />\n  </div>\n  );\n\nexport default App;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Home from './pages/Home';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}